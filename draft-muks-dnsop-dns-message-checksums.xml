<?xml version="1.0"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced.
     An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC5226 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC1035 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2119 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC5452 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5452.xml">
<!ENTITY RFC6891 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<?rfc tocappendix="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="3"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<?rfc comments="no" ?>
<?rfc inline="yes" ?>
<rfc category="exp" docName="draft-muks-dnsop-dns-message-checksums-00" ipr="trust200902">

  <front>

    <title>DNS message checksums</title>

    <author fullname="Mukund Sivaraman" initials="M." surname="Sivaraman">
      <organization>Internet Systems Consortium</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>94063</code>
          <region>CA</region>
          <country>US</country>
        </postal>
        <email>muks@mukund.org</email>
        <uri>http://www.isc.org/</uri>
      </address>
    </author>

    <date/>

    <!-- Meta-data Declarations -->

    <area>Internet Area</area>
    <workgroup>Internet Engineering Task Force</workgroup>

    <!-- <keyword>dns</keyword> -->

    <abstract>
      <t>This document describes a method for a client to be able to
      verify that IP-layer PDU fragments of a UDP DNS message have not
      been spoofed by an off-path attacker.</t>
    </abstract>

  </front>

  <middle>

    <section title="Introduction">
      <t><xref target="RFC1035" /> describes how DNS messages are to
      be transmitted over UDP. A DNS query message is transmitted
      using one UDP datagram from client to server, and a
      corresponding DNS reply message is transmitted using one UDP
      datagram from server to client.</t>

      <t>As a UDP datagram is transmitted in a single IP PDU, in
      theory the size of a UDP datagram (including various lower
      internet layer headers) can be as large as 64 KiB. But
      practically, if the datagram size exceeds the path MTU, then the
      datagram will either be fragmented at the IP layer, or dropped
      by a forwarder. In the case of IPv4, DNS datagrams may be
      fragmented by a sender or a forwarder. In the case of IPv6, DNS
      datagrams are fragmented by the sender only.</t>

      <t>IP-layer fragmentation for large DNS response datagrams
      introduce risk of cache poisoning by off-path attackers <xref
      target="Fragment-Poisonous"/> in which an attacker can
      circumvent some defense mechanisms like port, IP, and query
      randomization <xref target="RFC5452"/>.</t>

      <t>This memo introduces the concept of a DNS message checksum
      which may be used to stop the effects of such off-path attacks.</t>

      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL"
      in this document are to be interpreted as described in <xref
      target="RFC2119" />.</t>
    </section>

    <section title="DNS message checksum method">
      <t>Clients supporting DNS message checksums add an EDNS option to
      their queries, which signals their support for this feature.</t>

      <t>The CHECKSUM EDNS option contains 3 fields: NONCE, ALGORITHM,
      and DIGEST. These fields are described in <xref
      target="sec-format" />.</t>

      <t>It is OPTIONAL for a client to add a CHECKSUM EDNS option to
      DNS query messages. If it adds such an option, it MUST set the
      NONCE field to a random value. The ALGORITHM field MUST be set to
      0 and the DIGEST field MUST be left empty. The entire NONCE field
      MUST be randomly generated (i.e., in no predictable sequence and
      the random value must fill all bits of the field) for each query
      for which the client uses a CHECKSUM EDNS option. The client is
      expected to remember the per-query NONCE field's value to be used
      in verifying the reply to this query message.</t>

      <t>A client MUST NOT send multiple DNS query messages with the
      NONCE set to a fixed unchanging value. Instead, it must not send
      the option at all.</t>

      <t>The server SHOULD add a CHECKSUM EDNS option in the reply
      message to a corresponding query that arrived with this option
      present. The NONCE field MUST be copied verbatim from the query
      message to the corresponding reply message. A checksum is computed
      over the DNS reply message as described in <xref
      target="sec-computation" /> and the ALGORITHM and DIGEST fields
      MUST be set using the resulting checksum as given in <xref
      target="sec-format" />. The server is at liberty to choose any
      checksum algorithm it wants to. A list of algorithms is given in
      <xref target="sec-algorithms" />.</t>

      <t>If a server receives a query containing a CHECKSUM EDNS option
      with an ALGORITHM field that is not set to 0, it MUST ignore this
      option and process the request as if there were no CHECKSUM EDNS
      option in the query.</t>

      <t>When a client receives a reply message for which it sent a
      CHECKSUM EDNS option in the corresponding query, it SHOULD look
      for the presence of the CHECKSUM EDNS option in the reply.</t>

      <t>The client may handle the lack of a CHECKSUM EDNS option in the
      reply as it chooses to. It is currently not specified, but may be
      updated in the future.</t>

      <t>If a client receives a reply containing a CHECKSUM EDNS option
      with an unknown ALGORITHM value, it MUST ignore this option and
      handle the reply as if there were no CHECKSUM EDNS option in
      it. From the previous paragraph, it follows that the client
      behavior in this case is also currently not specified, but may be
      updated in the future.</t>

      <t>If a CHECKSUM EDNS option is present in the reply, the client
      SHOULD first check and ensure that the NONCE field contains the
      same nonce value that was sent in the corresponding query
      message. If the value in the NONCE field is different, the reply
      message MUST be discarded. Afterwards, the client SHOULD proceed
      to compute a checksum over the reply message as described in <xref
      target="sec-computation" /> using the checksum algorithm in the
      ALGORITHM field. It SHOULD then compare the checksum value with
      the value that was received in the DIGEST field for equality. If
      they are not equal, the reply message MUST be discarded. If they
      are equal, the reply message can be used normally as the client
      intends to use it.</t>

    </section>

    <section title="The CHECKSUM EDNS(0) option" anchor="sec-format">

      <t>CHECKSUM is an EDNS(0) <xref target="RFC6891" /> option that is
      used to transmit a digest of a DNS message in replies. Its use is
      described in a previous section. Here, its syntax is provided.</t>

      <section title="Wire format">

        <t>The following describes the wire format of the OPTION-DATA
        field <xref target="RFC6891" /> of the CHECKSUM EDNS option. All
        CHECKSUM option fields must be represented in network byte
        order.</t>

        <texttable>

          <ttcol>Option field</ttcol>
          <ttcol>Type</ttcol>
          <ttcol>Field size</ttcol>

          <c>NONCE</c>
          <c>unsigned integer</c>
          <c>128 bits (16 octets)</c>

          <c>ALGORITHM</c>
          <c>unsigned integer</c>
          <c>8 bits (1 octet)</c>

          <c>DIGEST</c>
          <c>byte array</c>
          <c>Variable length</c>

        </texttable>

      </section>

      <section title="Option fields">
        <section title="NONCE">
          <t>The NONCE field is represented as an unsigned 128-bit
          integer in network byte order. It MUST be randomly computed
          for each query message which a client sends out, and is copied
          verbatim from the query to the corresponding reply DNS message
          by the server.</t>
        </section>
        <section title="ALGORITHM">
          <t>The ALGORITHM field is represented as an unsigned 8-bit
          integer in network byte order. In query messages, it MUST be
          set to 0. In reply messages, it MUST contain the numeric value
          of the algorithm used to compute the DIGEST field. A list of
          algorithms and their values is given in <xref
          target="sec-algorithms" />.</t>
        </section>
        <section title="DIGEST">
          <t>The DIGEST field is represented as a variable-length
          sequence of octets present after the NONCE and ALGORITHM
          fields. Its size is implicitly computed from the value in the
          OPTION-LENGTH field <xref target="RFC6891" /> for the CHECKSUM
          EDNS option minus the size of the NONCE and ALGORITHM
          fields. In query messages, it MUST be empty. In reply
          messages, it MUST contain the digest of the reply message
          which is computed as described in <xref
          target="sec-computation" />.</t>
        </section>
      </section>
      <section title="Presentation format">
        <t>As with other EDNS(0) options, the CHECKSUM EDNS option does
        not have a presentation format.</t>
      </section>
    </section>

    <section title="Checksum computation" anchor="sec-computation">

      <t>To generate the checksum digest to be placed in the DIGEST
      field, first the entire DNS message must be prepared (rendered)
      along with the CHECKSUM option embedded in it to the point that it
      is ready to be sent out on the wire. In this CHECKSUM option,
      initially the DIGEST field must be filled with zero values and its
      size must be reserved equal to the size expected for the digest
      from the checksum algorithm intended to be used. The NONCE field
      MUST be set to the value of the nonce from the query DNS
      message. The ALGORITHM field MUST be set to the checksum algorithm
      intended to be used. After this, the whole message contents (from
      the start of the DNS message header onwards) must be input to the
      checksum algorithm and the calculated checksum must be patched
      into the DIGEST field, space for which was reserved before.</t>

      <t>To verify the checksum digest from a DNS message that was
      received, first the DIGEST field is copied to a temporary location
      and the DIGEST field in the message is patched with zero values.
      After this, the whole message contents (from the start of the DNS
      message header onwards) must be input to the checksum algorithm
      specified in the ALGORITHM field. The calculated checksum must be
      compared for equality with the checksum originally received in the
      DIGEST field, the content of which was earlier saved to a
      temporary location. If both are equal, the checksum matches.</t>

    </section>

    <section title="Security considerations" anchor="sec-security">

      <t>The methods in this memo are designed to thwart off-path
      spoofing attacks which may lead to cache-poisoning, including the
      specific case when IP-layer PDU fragmentation occurs.</t>

      <t>The CHECKSUM EDNS option is not designed to offer any
      protection against on-path attackers. Very little can be done
      without using shared-secret or public key cryptography for this
      case.</t>

      <t>Checksum computation may increase resource usage on servers and
      clients. It is thus desirable to use fast checksum algorithms that
      meet the requirements of <xref target="sec-algorithms" />.</t>

      <t>The entropy source used for generating random values for use in
      the NONCE field may be chosen similarly to provide ample security
      to verify a short-lived DNS message.</t>

      <t>The NONCE field effectively extends the ID field <xref
      target="RFC1035" /> in the DNS message header.</t>

      <t>As a side-effect of using checksums, resolver cache poisoning
      attacks are made more difficult due to the presence of the NONCE
      field.</t>

      <t>There is a risk of downgrade attack when the IP fragment
      containing the CHECKSUM EDNS option is spoofed, deleting this
      option. This risk would exist until the presence of the CHECKSUM
      option in replies is made mandatory when a corresponding option is
      sent in the query. This can be made so right from the start, or
      after an adoption period. At that time, it may be stated that a
      client that does not receive a CHECKSUM EDNS option in a reply
      would discard the reply message and retry the query using TCP.</t>

      <t>The CHECKSUM EDNS option cannot prevent some kinds of attack
      such as response and NS blocking and NS pinning as described in
      <xref target="Fragment-Poisonous"/>.</t>

    </section>

    <section title="IANA considerations">
      <t>This document defines a new EDNS(0) option, titled CHECKSUM
      (see <xref target="sec-format" />), assigned a value of [TBD] from
      the DNS EDNS0 Option Codes (OPT) space [to be removed upon
      publication:
      https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-11].</t>

      <texttable>

        <ttcol>Value</ttcol>
        <ttcol>Name</ttcol>
        <ttcol>Status</ttcol>
        <ttcol>Reference</ttcol>

        <c>TBD</c>
        <c>CHECKSUM</c>
        <c>TBD</c>
        <c>[draft-muks-dnsop-dns-message-checksums]</c>

      </texttable>

      <t>The CHECKSUM EDNS(0) option also defines an 8-bit ALGORITHM
      field, for which IANA is to create and maintain a new sub-registry
      entitled "DNS message checksum algorithms" under the Domain Name
      System (DNS) Parameters. Initial values for the DNS message
      checksum algorithms registry are given in <xref
      target="sec-algorithms" />; future assignments are to be made
      through Expert Review as in BCP 26 <xref target="RFC5226"
      />. Assignments consist of a DNS message checksum algorithm name
      and its associated value.</t>
    </section>

    <section title="Acknowledgements">
      <t>Tomek Mrugalski offered tips on draft naming and upload
      process. Joe Abley reviewed the draft and pointed out some nits
      that were not detected automatically. Ray Bellis, Robert Edmonds,
      Tony Finch, Paul Hoffman, Evan Hunt, Paul Vixie, and Paul Wouters
      reviewed drafts and sent in comments and opinions. Mark Andrews
      mentioned an alternate method at the same time (on an internal
      mailing list) to address spoofing issues that provided further
      support to the idea that CHECKSUM was worth pursuing.</t>
    </section>

  </middle>

  <back>

    <references title="Normative references">
      &RFC1035;
      &RFC2119;
      &RFC5452;
      &RFC6891;
    </references>

    <references title="Informative references">
      &RFC5226;

      <reference anchor="Fragment-Poisonous">
        <front>
          <title>Fragmentation Considered Poisonous</title>
          <author fullname="Herzberg, A."  initials="A." surname="Herzberg"></author>
          <author fullname=" H. Shulman"  initials="H." surname="Shulman"></author>
          <date year="2012" />
        </front>
      </reference>
    </references>

    <section title="Checksum algorithms" anchor="sec-algorithms">

      <t>The ALGORITHM field as specified in <xref target="sec-format"
      /> identifies the checksum algorithm that is used to compute the
      checksum digest for a DNS message.</t>

      <t>The following table lists the currently defined checksum
      algorithm types. Candidate checksum algorithms that are chosen for
      inclusion in this list MUST be one-way cryptographic hash
      functions that may be used by a client to securely verify a
      short-lived DNS message with a maximum message size constraint of
      64 KiB.</t>

        <texttable>

          <ttcol>Value(s)</ttcol>
          <ttcol>Name</ttcol>
          <ttcol>Length</ttcol>
          <ttcol>Status, Remarks</ttcol>

          <c>0</c>
          <c>EMPTY</c>
          <c>0 octets</c>
          <c>Empty digest (query only)</c>

          <c>1</c>
          <c>SHA-1</c>
          <c>20 octets</c>
          <c>Mandatory</c>

          <c>2-239</c>
          <c></c>
          <c></c>
          <c>Unassigned</c>

          <c>240-254</c>
          <c></c>
          <c></c>
          <c>Reserved for experimental use</c>

          <c>255</c>
          <c></c>
          <c></c>
          <c>Reserved</c>

        </texttable>

    </section>

    <section title="Change History (to be removed before publication)">
      <t>
        <list style="symbols">

          <t>
          draft-muks-dnsop-dns-message-checksums-00
          <vspace/>
          Initial draft (renamed version). Removed the NONCE-COPY field
          as it is no longer necessary. Doubled the size of the NONCE
          field to 128 bits. Added sample checksum algorithms. Fixed
          incorrect reference, language and grammar.
          </t>

        </list>
      </t>
    </section>

  </back>
</rfc>
